// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmithSwimmingSchoolApp.Data;

#nullable disable

namespace SmithSwimmingSchoolApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241219210346_m3")]
    partial class m3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Swimmer",
                            NormalizedName = "SWIMMER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "107",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "108",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "109",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "110",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "103",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "104",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "105",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "106",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93e9c5b9-6b5c-4869-bb41-c6b3f8eaa453",
                            Email = "admin@3s.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@3S.COM",
                            NormalizedUserName = "ADMIN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDo8De16yji7UM5S0x9r/yZX1GM1NNrTfwrg1BUJggKTcUdAs/nKf8KoWvUGbXx+Sg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7356ad5-ac6a-4a0c-b80c-54e6bdd0d237",
                            TwoFactorEnabled = false,
                            UserName = "admin@3s.com"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "671ea5e7-4531-42a6-998d-c17f4df12551",
                            Email = "johnsmith@3s.com",
                            EmailConfirmed = true,
                            FullName = "John Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSMITH@3S.COM",
                            NormalizedUserName = "JOHNSMITH@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2AozEpttCgNm9tsbSVGQLozZ6uBG79OTxUKz2VIUh4LPZlAPtebKq5A5ctSnvKhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74da92c4-78ef-429d-ad2c-ef65ce12c543",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith@3s.com"
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "decba032-db45-4c9c-8435-418ed348b3ce",
                            Email = "aliceaohnson@3s.com",
                            EmailConfirmed = true,
                            FullName = "Alice Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICEJOHNSON@3S.COM",
                            NormalizedUserName = "ALICEJOHNSON@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7e9f8fnu1DlPDJ42X2nziPXGf2x4I8V5O5Wdz3AhHRYlm+SEwl4dE8Wl90bx3zpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb0fd72d-6026-4951-a6ac-6731bca1636f",
                            TwoFactorEnabled = false,
                            UserName = "aliceaohnson@3s.com"
                        },
                        new
                        {
                            Id = "103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf4d7310-5c9c-4e89-ad0e-df6161127730",
                            Email = "bobbrown@3s.com",
                            EmailConfirmed = true,
                            FullName = "Bob Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBROWN@3S.COM",
                            NormalizedUserName = "BOBBROWN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELOgZh9QRWGkgv3JynmPK0x1I9igai/rgzI6VCXVeZuDvWAjBD0sYOqf5q3IGkMcMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fd86e18-45d7-4422-8b78-f8163f54cff9",
                            TwoFactorEnabled = false,
                            UserName = "bobbrown@3s.com"
                        },
                        new
                        {
                            Id = "104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71b830b6-8f6e-4de4-b2ff-19becedf34eb",
                            Email = "charlieblack@3s.com",
                            EmailConfirmed = true,
                            FullName = "Charlie Black",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLIEBLACK@3S.COM",
                            NormalizedUserName = "CHARLIEBLACK@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKrGlzcsJrqHSWAzaVfiEVOcRv2pTSnv0nTbS2rkzwVf1CALsuvL0Q6ALXTcc8p6rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f023127-6032-4a8d-a99f-23d9cfb72c06",
                            TwoFactorEnabled = false,
                            UserName = "charlieblack@3s.com"
                        },
                        new
                        {
                            Id = "105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac700a1c-e33c-4832-adbd-54cf9be155ac",
                            Email = "dianawhite@3s.com",
                            EmailConfirmed = true,
                            FullName = "Diana White",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANAWHITE@3S.COM",
                            NormalizedUserName = "DIANAWHITE@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAczL5NeYi73fzO96gZ1ZYMdEYqFr5KNN6z8rC9akn6YQ7Hl64ATht+i/AT4ZuZzow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c03fc1d9-e2f1-4767-9b50-c8f367812d4b",
                            TwoFactorEnabled = false,
                            UserName = "dianawhite@3s.com"
                        },
                        new
                        {
                            Id = "106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "325acd12-0b9d-4c6c-8cc5-af0a7eaa599c",
                            Email = "edwardgreen@3s.com",
                            EmailConfirmed = true,
                            FullName = "Edward Green",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDWARDGREEN@3S.COM",
                            NormalizedUserName = "EDWARDGREEN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEASG7P+RJ2QvmuLionq7rxBoftTOUW6Q5PY7PiC8a0um06OF1NDHBg7+wJij8uD4lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d832bafe-543f-46eb-8099-cfe4f7177f27",
                            TwoFactorEnabled = false,
                            UserName = "edwardgreen@3s.com"
                        },
                        new
                        {
                            Id = "107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "913ed9e2-1c23-4386-bcc3-2a67e02d888a",
                            Email = "janedoe@3s.com",
                            EmailConfirmed = true,
                            FullName = "Jane Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@3S.COM",
                            NormalizedUserName = "JANEDOE@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4h0sogHk4BIVDDs5JYm2fdL0YMZvNlV9B4zkEHSaDRibxl75O9dibl+lqYBs4z6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fc6d4da-dac2-4bec-9010-bfbc27b59f5a",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@3s.com"
                        },
                        new
                        {
                            Id = "108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fbfaceb-f79a-4b13-bf1a-5f995a7fa57b",
                            Email = "michaeljordan@3s.com",
                            EmailConfirmed = true,
                            FullName = "Michael Jordan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAELJORDAN@3S.COM",
                            NormalizedUserName = "MICHAELJORDAN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKlkpl2YJDC/ax7Cx4VxQEEcfeWb5UhXiC4OwE1LWtJFS3h3xyHeSR2P2OAIohA5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c21a0bf9-9cf9-4673-8837-9092e24bb2f3",
                            TwoFactorEnabled = false,
                            UserName = "michaeljordan@3s.com"
                        },
                        new
                        {
                            Id = "109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe9b6362-b22c-41da-9496-282619409c7a",
                            Email = "serenawilliams@3s.com",
                            EmailConfirmed = true,
                            FullName = "Serena Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERENAWILLIAMS@3S.COM",
                            NormalizedUserName = "SERENAWILLIAMS@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI78up5e23oMnpciPNTPkKb88ycMYNu8gZ2MRoSQDAXjE5pZWalQCrN5sTX0PGWTjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54d89e88-5214-475a-8e62-96a519f2ffb0",
                            TwoFactorEnabled = false,
                            UserName = "serenawilliams@3s.com"
                        },
                        new
                        {
                            Id = "110",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26c253f1-19ba-4a7f-a6a0-a26a4ead7922",
                            Email = "rogerfederer@3s.com",
                            EmailConfirmed = true,
                            FullName = "Roger Federer",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROGERFEDERER@3S.COM",
                            NormalizedUserName = "ROGERFEDERER@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAc1t9uk2MBn9hw7qsIdFeW1DhTPui//Sbjn3sFt52pk1zAqLjqZdIm+nAF+pp6QTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c57faeee-5e47-4563-806f-dbcce21df1e2",
                            TwoFactorEnabled = false,
                            UserName = "rogerfederer@3s.com"
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachSex")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique()
                        .HasFilter("[IdentityUserId] IS NOT NULL");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachSex = 0,
                            IdentityUserId = "101",
                            Name = "John Smith",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            CoachSex = 1,
                            IdentityUserId = "107",
                            Name = "Jane Doe",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            Id = 3,
                            CoachSex = 0,
                            IdentityUserId = "108",
                            Name = "Michael Jordan",
                            PhoneNumber = "333-444-5555"
                        },
                        new
                        {
                            Id = 4,
                            CoachSex = 1,
                            IdentityUserId = "109",
                            Name = "Serena Williams",
                            PhoneNumber = "777-888-9999"
                        },
                        new
                        {
                            Id = 5,
                            CoachSex = 1,
                            IdentityUserId = "110",
                            Name = "Roger Federer",
                            PhoneNumber = "555-666-7777"
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("LevelCourse")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = 1,
                            LevelCourse = 0,
                            Title = "Beginner Swimming"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = 2,
                            LevelCourse = 1,
                            Title = "Advanced Swimming"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = 3,
                            LevelCourse = 1,
                            Title = "Intermediate Swimming"
                        },
                        new
                        {
                            Id = 4,
                            CoachId = 4,
                            LevelCourse = 2,
                            Title = "Expert Swimming"
                        },
                        new
                        {
                            Id = 5,
                            CoachId = 5,
                            LevelCourse = 3,
                            Title = "Master Swimming"
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("GroupingId")
                        .HasColumnType("int");

                    b.Property<int>("SwimmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GroupingId");

                    b.HasIndex("SwimmerId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            GroupingId = 1,
                            SwimmerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            GroupingId = 2,
                            SwimmerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            GroupingId = 3,
                            SwimmerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            GroupingId = 4,
                            SwimmerId = 4
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            GroupingId = 5,
                            SwimmerId = 5
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Grouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Places")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Groupings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Beginner",
                            Places = 15,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Advanced",
                            Places = 10,
                            StartDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Intermediate",
                            Places = 12,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Expert",
                            Places = 8,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Master",
                            Places = 6,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Good progress",
                            EnrollmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Excellent performance",
                            EnrollmentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Needs improvement",
                            EnrollmentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "Outstanding swimmer",
                            EnrollmentId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "Beginner with potential",
                            EnrollmentId = 5
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Swimmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SwimmerSex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique()
                        .HasFilter("[IdentityUserId] IS NOT NULL");

                    b.ToTable("Swimmers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2005, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "102",
                            Name = "Alice Johnson",
                            PhoneNumber = "111-222-3333",
                            SwimmerSex = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2008, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "103",
                            Name = "Bob Brown",
                            PhoneNumber = "444-555-6666",
                            SwimmerSex = 0
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2010, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "104",
                            Name = "Charlie Black",
                            PhoneNumber = "888-999-0000",
                            SwimmerSex = 0
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2006, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "105",
                            Name = "Diana White",
                            PhoneNumber = "222-333-4444",
                            SwimmerSex = 1
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2007, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "106",
                            Name = "Edward Green",
                            PhoneNumber = "555-777-8888",
                            SwimmerSex = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Coach", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("SmithSwimmingSchoolApp.Models.Coach", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Course", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.Coach", "Coach")
                        .WithMany("Courses")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Enrollment", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmithSwimmingSchoolApp.Models.Grouping", "Grouping")
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmithSwimmingSchoolApp.Models.Swimmer", "Swimmer")
                        .WithMany("Enrollments")
                        .HasForeignKey("SwimmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grouping");

                    b.Navigation("Swimmer");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Report", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.Enrollment", "Enrollment")
                        .WithMany("Reports")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Swimmer", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("SmithSwimmingSchoolApp.Models.Swimmer", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Coach", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Enrollment", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Grouping", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Swimmer", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
