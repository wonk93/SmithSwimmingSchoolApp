// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmithSwimmingSchoolApp.Data;

#nullable disable

namespace SmithSwimmingSchoolApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Swimmer",
                            NormalizedName = "SWIMMER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "101",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "107",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "108",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "109",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "110",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "103",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "104",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "105",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "106",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0473fdb9-cda8-4d84-ac42-b04ab5ad739e",
                            Email = "admin@3s.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@3S.COM",
                            NormalizedUserName = "ADMIN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAjCXQJJXxH3Jw7a+b7dXRY0EvH7tDMePzm3wUfFV+IxJO2GAcAhBYpzhZjBHrp0Kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e4031f3-8e6a-4ab6-a0d3-8fef6e0f67b5",
                            TwoFactorEnabled = false,
                            UserName = "admin@3s.com"
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c74e9ecc-e4c7-49a4-bd58-2ccf231c770b",
                            Email = "johnsmith@3s.com",
                            EmailConfirmed = true,
                            FullName = "John Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSMITH@3S.COM",
                            NormalizedUserName = "JOHNSMITH@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELiDCSQ6z4L40XYM9AtHacy19wENcUrTyLW0l5XvlwIHm6K8juxoNAHzk1/7qRKeEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13dfcd7b-0c4d-435f-b35f-b6fd2853d393",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith@3s.com"
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "095c9051-a8fb-4c5b-aba1-a9f3a2be47a4",
                            Email = "aliceaohnson@3s.com",
                            EmailConfirmed = true,
                            FullName = "Alice Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICEJOHNSON@3S.COM",
                            NormalizedUserName = "ALICEJOHNSON@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKMHJY0r9EQfJUyvbq1epXDsF1VMSXZcWB61rfEvUwK6nPkJpm7DAog1Jm2JZJjjvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc0ff8d1-6b4e-4705-be5f-91abab45602d",
                            TwoFactorEnabled = false,
                            UserName = "aliceaohnson@3s.com"
                        },
                        new
                        {
                            Id = "103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adc5baa0-0929-4ff4-8f53-b16783b063cf",
                            Email = "bobbrown@3s.com",
                            EmailConfirmed = true,
                            FullName = "Bob Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBROWN@3S.COM",
                            NormalizedUserName = "BOBBROWN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHCioXW1YdDiK7U4vIerwbPuHCcW5imb1kZPpuADTy4+OKHPxUeIUIV24yszEsDiHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdd24798-95b8-41a8-afbe-933f576fe661",
                            TwoFactorEnabled = false,
                            UserName = "bobbrown@3s.com"
                        },
                        new
                        {
                            Id = "104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49b18854-0557-4b8f-b213-075aab3d3acf",
                            Email = "charlieblack@3s.com",
                            EmailConfirmed = true,
                            FullName = "Charlie Black",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLIEBLACK@3S.COM",
                            NormalizedUserName = "CHARLIEBLACK@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHxYBNibh2KJMRQ9DextyxWgGgo4lI1ieUHGp0hMJf/7y9n6ODTZJMLochhlQacgog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c0f77a6-5494-40a0-9903-1d83171bb055",
                            TwoFactorEnabled = false,
                            UserName = "charlieblack@3s.com"
                        },
                        new
                        {
                            Id = "105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "091f7f95-2112-4987-8d9c-c98f83069fe7",
                            Email = "dianawhite@3s.com",
                            EmailConfirmed = true,
                            FullName = "Diana White",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANAWHITE@3S.COM",
                            NormalizedUserName = "DIANAWHITE@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZHlXZ4auolYAzS07cyAJWCA9RTwhbnKLcz2TA/PBtLYi2tJsDpxzk8oyJlDVlcxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79183591-915b-4584-bf47-ff8a419b1a77",
                            TwoFactorEnabled = false,
                            UserName = "dianawhite@3s.com"
                        },
                        new
                        {
                            Id = "106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e43477d1-7030-4c2f-89c3-17218cb0c87a",
                            Email = "edwardgreen@3s.com",
                            EmailConfirmed = true,
                            FullName = "Edward Green",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDWARDGREEN@3S.COM",
                            NormalizedUserName = "EDWARDGREEN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFNAhRNN52nAS8qqApViMMO/iIvu0C6LeQ0BwFgsPqxxaGvJCO7rbgHnWt5KU32MPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29cc4aff-dee1-46b6-ad04-aaa6dab3c495",
                            TwoFactorEnabled = false,
                            UserName = "edwardgreen@3s.com"
                        },
                        new
                        {
                            Id = "107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc30285f-9ec1-4e03-833c-13a101a1b546",
                            Email = "janedoe@3s.com",
                            EmailConfirmed = true,
                            FullName = "Jane Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@3S.COM",
                            NormalizedUserName = "JANEDOE@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELMwLrJ5zqKjjg0B8rgbPNk8Ka/1uRwXCSt68D+BjGYT6yw2ICIuGvCUEdN85ZJ79w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4735454f-af22-4486-b616-04bc8bb5b03f",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@3s.com"
                        },
                        new
                        {
                            Id = "108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "725ec462-b525-4abe-a14b-f76ac3bcf9ce",
                            Email = "michaeljordan@3s.com",
                            EmailConfirmed = true,
                            FullName = "Michael Jordan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAELJORDAN@3S.COM",
                            NormalizedUserName = "MICHAELJORDAN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMXexiUeIGuiA6/IxMFu0VKe3UICuRg6gYwvOK02jUipI/3Cu+Tr6Kwgu5NwJ7KuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ada2fe8f-17c7-4e48-9e6c-3ba7e2a2d55a",
                            TwoFactorEnabled = false,
                            UserName = "michaeljordan@3s.com"
                        },
                        new
                        {
                            Id = "109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "758ce199-261f-4623-8d7f-8533bdcdb349",
                            Email = "serenawilliams@3s.com",
                            EmailConfirmed = true,
                            FullName = "Serena Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERENAWILLIAMS@3S.COM",
                            NormalizedUserName = "SERENAWILLIAMS@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2sNan9zJljcE5oK33r2dXtufh0tXlFE8HALGVBES6eAuw1WlZpjrz02y/JZXe1yA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "649b9b8e-0ecb-447b-9271-9fce99afd7b4",
                            TwoFactorEnabled = false,
                            UserName = "serenawilliams@3s.com"
                        },
                        new
                        {
                            Id = "110",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf102909-17bb-492d-88c3-c18b8c996971",
                            Email = "rogerfederer@3s.com",
                            EmailConfirmed = true,
                            FullName = "Roger Federer",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROGERFEDERER@3S.COM",
                            NormalizedUserName = "ROGERFEDERER@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEox4mz6Y1YESFGsiUKIlgzFZkM6D9gxoYkJeBoHBi6vfVLlXI9sdOUqarc/AyiZ4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0149e17-6d0e-4764-918c-e54eeab4ddbd",
                            TwoFactorEnabled = false,
                            UserName = "rogerfederer@3s.com"
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachSex")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique()
                        .HasFilter("[IdentityUserId] IS NOT NULL");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachSex = 0,
                            IdentityUserId = "101",
                            Name = "John Smith",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            CoachSex = 1,
                            IdentityUserId = "107",
                            Name = "Jane Doe",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            Id = 3,
                            CoachSex = 0,
                            IdentityUserId = "108",
                            Name = "Michael Jordan",
                            PhoneNumber = "333-444-5555"
                        },
                        new
                        {
                            Id = 4,
                            CoachSex = 1,
                            IdentityUserId = "109",
                            Name = "Serena Williams",
                            PhoneNumber = "777-888-9999"
                        },
                        new
                        {
                            Id = 5,
                            CoachSex = 1,
                            IdentityUserId = "110",
                            Name = "Roger Federer",
                            PhoneNumber = "555-666-7777"
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("LevelCourse")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = 1,
                            LevelCourse = 0,
                            Title = "Beginner Swimming"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = 2,
                            LevelCourse = 1,
                            Title = "Advanced Swimming"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = 3,
                            LevelCourse = 1,
                            Title = "Intermediate Swimming"
                        },
                        new
                        {
                            Id = 4,
                            CoachId = 4,
                            LevelCourse = 2,
                            Title = "Expert Swimming"
                        },
                        new
                        {
                            Id = 5,
                            CoachId = 5,
                            LevelCourse = 3,
                            Title = "Master Swimming"
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("GroupingId")
                        .HasColumnType("int");

                    b.Property<int>("SwimmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GroupingId");

                    b.HasIndex("SwimmerId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            GroupingId = 1,
                            SwimmerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            GroupingId = 2,
                            SwimmerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            GroupingId = 3,
                            SwimmerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            GroupingId = 4,
                            SwimmerId = 4
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            GroupingId = 5,
                            SwimmerId = 5
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Grouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Places")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Groupings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Beginner",
                            Places = 15,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Advanced",
                            Places = 10,
                            StartDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Intermediate",
                            Places = 12,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Expert",
                            Places = 8,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "Master",
                            Places = 6,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Good progress",
                            EnrollmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Excellent performance",
                            EnrollmentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Needs improvement",
                            EnrollmentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "Outstanding swimmer",
                            EnrollmentId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "Beginner with potential",
                            EnrollmentId = 5
                        });
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Swimmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SwimmerSex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique()
                        .HasFilter("[IdentityUserId] IS NOT NULL");

                    b.ToTable("Swimmers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2005, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "102",
                            Name = "Alice Johnson",
                            PhoneNumber = "111-222-3333",
                            SwimmerSex = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2008, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "103",
                            Name = "Bob Brown",
                            PhoneNumber = "444-555-6666",
                            SwimmerSex = 0
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2010, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "104",
                            Name = "Charlie Black",
                            PhoneNumber = "888-999-0000",
                            SwimmerSex = 0
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2006, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "105",
                            Name = "Diana White",
                            PhoneNumber = "222-333-4444",
                            SwimmerSex = 1
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2007, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityUserId = "106",
                            Name = "Edward Green",
                            PhoneNumber = "555-777-8888",
                            SwimmerSex = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Coach", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("SmithSwimmingSchoolApp.Models.Coach", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Course", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.Coach", "Coach")
                        .WithMany("Courses")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Enrollment", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmithSwimmingSchoolApp.Models.Grouping", "Grouping")
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmithSwimmingSchoolApp.Models.Swimmer", "Swimmer")
                        .WithMany("Enrollments")
                        .HasForeignKey("SwimmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grouping");

                    b.Navigation("Swimmer");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Report", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.Enrollment", "Enrollment")
                        .WithMany("Reports")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Swimmer", b =>
                {
                    b.HasOne("SmithSwimmingSchoolApp.Models.ApplicationUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("SmithSwimmingSchoolApp.Models.Swimmer", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Coach", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Enrollment", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Grouping", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SmithSwimmingSchoolApp.Models.Swimmer", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
